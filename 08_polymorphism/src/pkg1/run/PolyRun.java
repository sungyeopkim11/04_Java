package pkg1.run;

/* 다형성 : 다양한 형태를 지닌는 성질
 *  -> 어떤 한 가지가 여러 모습을 갖는다는 개념
 *  
 *  1. 오버로딩 :
 *   - 하나의 메서드 이름으로 
 *    대개 변수에 따라 다르게 동작하는 메서드를 만듦
 *    --> 동일한 동작을 요수할 때 매대 변수가 다른 경우를 
 *        유연하게 대체
 *        
 * 2. 객체 다형성
 *  - 상속 관계에서 
 *    "참조 변수"의 자료형의 따라 
 *     참조 당하는 "객체"의 자료형이 변하는 것 처럼 보임
 *     
 *   - 업 캐스팅  (자식 객체 -> 부모 객체)
 *    > 부모 타입의 참조 변수가 
 *      자식 타입의 객체를 참조하여
 *      참조 당하는 자식 객체의 전체가 아니라
 *      내부에 존재하는 부모 객체만 참조하게 됨
 *      
 *      --> 자깃 객체가 부모 객체로 변한 것처럼 보임
 *      
 *   
 *   
 *   - 다운 캐스팅 (부모 객체 -> 자식 객체)
 *   > 업 캐스팅 상태의
 *     부모 참조 변수 = 자식 객체; 에서
 *     
 *     참조 변수의 타입을 자식으로 강제 형변환 하여
 *     
 *     자식 참조 변수 = (자식) 객체; 형태로 변경
 *     
 *     -> 부모 부분만 참조하다가
 *       다시 자식 객체 전체를 참조하게 바뀜
 *       
 *       --> 부모 객체가 자식 객체로 변한 것처럼 보임
 *   
 * 
 * */

import pkg1.service.PolyService;

public class PolyRun {
	public static void main(String[] args) {
		
		PolyService service = new PolyService();
		
//		service.test1();
//		service.test2();
//		service.test3();
		service.test4();
	}

}
